name: Shuttle Availability Checker

on:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes
  workflow_dispatch:  # Allow manual trigger

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, but don't cancel in-progress runs
concurrency:
  group: "shuttle-checker"
  cancel-in-progress: false

jobs:
  check-availability:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Set maximum runtime to 10 minutes
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true

      - name: Run Shuttle Checker
        env:
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        run: |
          mkdir -p public/api
          echo "Running check-all with configured environment..."
          # Run the check and capture output
          output=$(go run main.go)
          status=$?
          
          # Save output to status.json
          echo "$output" > public/api/status.json
          
          # Check if the command was successful
          if [ $status -ne 0 ]; then
            echo "Error running check-all. Environment variables status:"
            echo "MAILGUN_DOMAIN: ${MAILGUN_DOMAIN:+set}"
            echo "MAILGUN_API_KEY: ${MAILGUN_API_KEY:+set}"
            echo "RECIPIENT_EMAIL: ${RECIPIENT_EMAIL:+set}"
            echo "SENDER_EMAIL: ${SENDER_EMAIL:+set}"
            exit 1
          fi

      - name: Update Results Page
        if: success()
        run: |
          timestamp=$(date -u +"%Y-%m-%d %H:%M UTC")
          cat > public/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Shuttle Availability Status</title>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <meta http-equiv="refresh" content="1800">
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      line-height: 1.6;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      background-color: #f5f5f5;
                  }
                  .container {
                      background-color: white;
                      padding: 20px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 20px;
                  }
                  .status {
                      margin-top: 20px;
                      padding: 15px;
                      border-radius: 4px;
                  }
                  .timestamp {
                      text-align: center;
                      color: #666;
                      margin-top: 20px;
                      font-size: 0.9em;
                  }
                  #results {
                      margin-top: 20px;
                      border-collapse: collapse;
                      width: 100%;
                  }
                  #results th, #results td {
                      padding: 8px;
                      text-align: left;
                      border-bottom: 1px solid #ddd;
                  }
                  #results tr:nth-child(even) {
                      background-color: #f9f9f9;
                  }
                  .available {
                      color: #28a745;
                      font-weight: bold;
                  }
                  .not-available {
                      color: #dc3545;
                  }
                  .api-link {
                      text-align: center;
                      margin-top: 20px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>Shuttle Availability Status</h1>
                  </div>
                  <div class="status">
                      <p>Last check: <span id="lastCheck">TIMESTAMP</span></p>
                      <div id="resultsTable"></div>
                  </div>
                  <div class="api-link">
                      <p><a href="./api/status.json" target="_blank">View Raw JSON API Response</a></p>
                  </div>
                  <div class="timestamp">
                      <p>This page auto-updates every 30 minutes</p>
                      <p><small>Next refresh in <span id="countdown">30:00</span></small></p>
                  </div>
              </div>
              <script>
                  function updateCountdown() {
                      const countdownEl = document.getElementById('countdown');
                      let [minutes, seconds] = countdownEl.textContent.split(':').map(Number);
                      
                      if (seconds > 0) {
                          seconds--;
                      } else if (minutes > 0) {
                          minutes--;
                          seconds = 59;
                      }
                      
                      countdownEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                  }
                  
                  async function loadResults() {
                      try {
                          const response = await fetch('./api/status.json');
                          const data = await response.json();
                          
                          const table = document.createElement('table');
                          table.id = 'results';
                          
                          // Create header
                          const thead = document.createElement('thead');
                          thead.innerHTML = `
                              <tr>
                                  <th>Location</th>
                                  <th>Status</th>
                                  <th>Available Dates</th>
                                  <th>Last Checked</th>
                              </tr>
                          `;
                          table.appendChild(thead);
                          
                          // Create body
                          const tbody = document.createElement('tbody');
                          data.results.forEach(result => {
                              const tr = document.createElement('tr');
                              const statusClass = result.available ? 'available' : 'not-available';
                              const statusText = result.available ? '✅ Available' : '❌ Not Available';
                              const availableDates = result.availableDates ? result.availableDates.join(', ') : 'None';
                              
                              tr.innerHTML = `
                                  <td>${result.name}</td>
                                  <td class="${statusClass}">${statusText}</td>
                                  <td>${availableDates}</td>
                                  <td>${new Date(result.checkedAt).toLocaleString()}</td>
                              `;
                              tbody.appendChild(tr);
                          });
                          table.appendChild(tbody);
                          
                          document.getElementById('resultsTable').innerHTML = '';
                          document.getElementById('resultsTable').appendChild(table);
                          
                          // Update timestamp
                          document.getElementById('lastCheck').textContent = new Date().toLocaleString();
                      } catch (error) {
                          console.error('Error loading results:', error);
                      }
                  }
                  
                  // Initial load
                  loadResults();
                  
                  // Update countdown
                  setInterval(updateCountdown, 1000);
                  
                  // Reload results every 30 minutes
                  setInterval(loadResults, 1800000);
              </script>
          </body>
          </html>
          EOL
          
          # Replace TIMESTAMP placeholder with actual timestamp
          sed -i "s/TIMESTAMP/$timestamp/g" public/index.html

      - name: Setup Pages
        if: success()
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        if: success()
        id: deployment
        uses: actions/deploy-pages@v4 